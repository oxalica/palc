error[E0277]: `MyType` cannot be parsed into a palc argument value
 --> tests/ui/args-type-unparseable.rs:5:10
  |
5 |     arg: MyType,
  |          ^^^^^^ Unparsable type
  |
  = help: the trait `ArgValueInfo<MyType>` is not implemented for `MyType`
  = note: for enum types, try `derive(palc::ValueEnum)` on it
  = note: or you can implement either `From<&OsStr>`, `From<&str>` or `FromStr` for it to make it parseable
note: required by a bound in `place_for_set_value`
 --> src/runtime.rs
  |
  | pub fn place_for_set_value<T, A: ArgValueInfo<T>>(
  |                                  ^^^^^^^^^^^^^^^ required by this bound in `place_for_set_value`

error[E0277]: `MyType` cannot be parsed into a palc argument value
 --> tests/ui/args-type-unparseable.rs:9:18
  |
9 |     vec_arg: Vec<MyType>,
  |                  ^^^^^^ Unparsable type
  |
  = help: the trait `ArgValueInfo<MyType>` is not implemented for `MyType`
  = note: for enum types, try `derive(palc::ValueEnum)` on it
  = note: or you can implement either `From<&OsStr>`, `From<&str>` or `FromStr` for it to make it parseable
note: required by a bound in `place_for_vec`
 --> src/runtime.rs
  |
  | pub fn place_for_vec<T, A: ArgValueInfo<T>>(place: &mut Option<Vec<T>>, _: A) -> &mut dyn ArgPlace {
  |                            ^^^^^^^^^^^^^^^ required by this bound in `place_for_vec`

error[E0277]: `MyType` cannot be parsed into a palc argument value
 --> tests/ui/args-type-unparseable.rs:3:17
  |
3 |     positional: MyType,
  |                 ^^^^^^ Unparsable type
  |
  = help: the trait `ArgValueInfo<_>` is not implemented for `MyType`
  = note: for enum types, try `derive(palc::ValueEnum)` on it
  = note: or you can implement either `From<&OsStr>`, `From<&str>` or `FromStr` for it to make it parseable
note: required by a bound in `parse_take_arg`
 --> src/runtime.rs
  |
  | pub fn parse_take_arg<T, A: ArgValueInfo<T>>(s: &mut OsString, _: A) -> Result<T> {
  |                             ^^^^^^^^^^^^^^^ required by this bound in `parse_take_arg`

error[E0277]: `MyType` cannot be parsed into a palc argument value
 --> tests/ui/args-type-unparseable.rs:7:14
  |
7 |     vec: Vec<MyType>,
  |              ^^^^^^ Unparsable type
  |
  = help: the trait `ArgValueInfo<_>` is not implemented for `MyType`
  = note: for enum types, try `derive(palc::ValueEnum)` on it
  = note: or you can implement either `From<&OsStr>`, `From<&str>` or `FromStr` for it to make it parseable
note: required by a bound in `parse_take_arg`
 --> src/runtime.rs
  |
  | pub fn parse_take_arg<T, A: ArgValueInfo<T>>(s: &mut OsString, _: A) -> Result<T> {
  |                             ^^^^^^^^^^^^^^^ required by this bound in `parse_take_arg`

error[E0277]: `MyType` cannot be parsed into a palc argument value
  --> tests/ui/args-type-unparseable.rs:16:32
   |
16 |     option_vec_arg: Option<Vec<MyType>>,
   |                                ^^^^^^ Unparsable type
   |
   = help: the trait `ArgValueInfo<MyType>` is not implemented for `MyType`
   = note: for enum types, try `derive(palc::ValueEnum)` on it
   = note: or you can implement either `From<&OsStr>`, `From<&str>` or `FromStr` for it to make it parseable
note: required by a bound in `place_for_vec`
  --> src/runtime.rs
   |
   | pub fn place_for_vec<T, A: ArgValueInfo<T>>(place: &mut Option<Vec<T>>, _: A) -> &mut dyn ArgPlace {
   |                            ^^^^^^^^^^^^^^^ required by this bound in `place_for_vec`

error[E0277]: `MyType` cannot be parsed into a palc argument value
  --> tests/ui/args-type-unparseable.rs:14:28
   |
14 |     option_vec: Option<Vec<MyType>>,
   |                            ^^^^^^ Unparsable type
   |
   = help: the trait `ArgValueInfo<_>` is not implemented for `MyType`
   = note: for enum types, try `derive(palc::ValueEnum)` on it
   = note: or you can implement either `From<&OsStr>`, `From<&str>` or `FromStr` for it to make it parseable
note: required by a bound in `parse_take_arg`
  --> src/runtime.rs
   |
   | pub fn parse_take_arg<T, A: ArgValueInfo<T>>(s: &mut OsString, _: A) -> Result<T> {
   |                             ^^^^^^^^^^^^^^^ required by this bound in `parse_take_arg`
